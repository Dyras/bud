/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-kjo",
factory: function (require) {
var plugin=(()=>{var O=Object.create,c=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var F=a=>c(a,"__esModule",{value:!0});var o=a=>{if(typeof require!="undefined")return require(a);throw new Error('Dynamic require of "'+a+'" is not supported')};var I=(a,t)=>{for(var i in t)c(a,i,{get:t[i],enumerable:!0})},M=(a,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of _(t))!q.call(a,s)&&s!=="default"&&c(a,s,{get:()=>t[s],enumerable:!(i=S(t,s))||i.enumerable});return a},r=a=>M(F(c(a!=null?O(A(a)):{},"default",a&&a.__esModule&&"default"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var T={};I(T,{default:()=>R});var w=r(o("@yarnpkg/cli")),v=r(o("@yarnpkg/core")),j=r(o("@yarnpkg/shell")),$=1,m=0,e=class extends w.BaseCommand{async getManifest(){return await v.Manifest.tryFind(this.context.cwd)}async $(t){let i;return Array.isArray(t)?i=await t.reduce(this.sequential.bind(this),this.promiseOK()):i=await this.runTask(t),this.taskFailed(i)&&process.exit($),Promise.resolve(m)}async sequential(t,i){let s=await t;return this.taskFailed(s)?$:this.$(i)}runTask(t){let[i,...s]=t.split(" ");return(0,j.execute)(i,s)}taskFailed(t){return Array.isArray(t)?t.filter(i=>i!==m).length>0:t!==m}async promiseOK(){return m}};e.usage={category:"kjo"};var x=r(o("clipanion")),p=class extends e{constructor(){super(...arguments);this.cjs=x.Option.Boolean("-c,--cjs",!1);this.esm=x.Option.Boolean("-e,--esm",!1);this.commands={all:"yarn workspaces foreach --topological-dev --no-private --exclude @roots/bud-typings -i -p -v run build",cjs:"yarn workspaces foreach --topological-dev --no-private --exclude @roots/bud-typings -i -p -v run build:cjs",esm:"yarn workspaces foreach --topological-dev --no-private --exclude @roots/bud-typings -i -p -v run build:esm"}}async execute(){let t=[];this.cjs&&t.push(this.commands.cjs),this.esm&&t.push(this.commands.esm),!this.cjs&&!this.esm&&t.push(this.commands.all),await this.$(t)}};p.paths=[["kjo","build"]];var C=r(o("clipanion")),u=class extends e{constructor(){super(...arguments);this.dfx=C.Option.Boolean("-d,--dfx",!1)}async execute(){if(this.dfx){await this.$("git clean -dfx"),await this.$("yarn cache clean");return}console.log("rimraf packages/**/.budfiles"),await this.$("yarn rimraf packages/**/.budfiles"),console.log("rimraf examples/*/node_modules"),await this.$("yarn rimraf examples/*/node_modules"),console.log("rimraf packages/@roots/*/lib"),await this.$("yarn rimraf packages/@roots/*/lib"),console.log("rimraf packages/@roots/*/types"),await this.$("yarn rimraf packages/@roots/*/types"),console.log("rimraf packages/@roots/*/node_modules"),await this.$("yarn rimraf packages/@roots/*/node_modules"),console.log("rimraf node_modules"),await this.$("yarn rimraf node_modules"),console.log("cache clean"),await this.$("yarn cache clean")}};u.paths=[["kjo","clean"]];var l=r(o("clipanion")),d=class extends e{constructor(){super(...arguments);this.all=l.Option.Boolean("-a,--all",!1);this.prettier=l.Option.Boolean("-p,--prettier",!1);this.eslint=l.Option.Boolean("-e,--eslint",!1);this.skypack=l.Option.Boolean("-s,--skypack",!1)}async execute(){let t=!this.prettier&&!this.skypack&&!this.eslint||this.all;(this.eslint||t)&&(await this.$("yarn eslint packages/**/src/**/*.{js,jsx,ts,tsx} --fix"),await this.$("yarn eslint dev/**/*.{js,jsx,ts,tsx} --fix")),(this.prettier||t)&&(await this.$("yarn prettier packages/**/src/**/*.{ts,js,tsx,jsx} --fix --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern"),await this.$("yarn prettier dev/**/*.{ts,js,tsx,jsx} --fix --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern"),await this.$("yarn prettier site/**/*.{ts,js,tsx,jsx,md,mdx} --fix --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern")),(this.skypack||t)&&await this.$("yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg")}};d.paths=[["kjo","lint"]];var n=r(o("clipanion")),f=class extends e{constructor(){super(...arguments);this.all=n.Option.Boolean("-a,--all",!1);this.integration=n.Option.Boolean("-i,--integration",!1);this.unit=n.Option.Boolean("-u,--unit",!1);this.workers=n.Option.String("-w,--workers","50%");this.update=n.Option.Boolean("-up, --update",!1)}async execute(){let t=!this.unit&&!this.integration||this.all;if(this.unit||t){let i=`yarn jest --coverage --testPathIgnorePatterns="tests/integration" --testPathIgnorePatterns="tests/util" --maxWorkers=${this.workers}`;this.update&&i.concat(" --updateSnapshot"),await this.$(i)}if(this.integration||t){let i="node ./jest.integration.js";this.update&&i.concat(" --updateSnapshot"),await this.$(i)}}};f.paths=[["kjo","test"]];var k=r(o("clipanion")),P=r(o("@yarnpkg/fslib")),h=class extends e{constructor(){super(...arguments);this.version=k.Option.String("-v,--version",{required:!1});this.tag=k.Option.String("-t,--tag",{required:!1})}async execute(){var i,s;let{raw:t}=await this.getManifest();t.manifest.version=(i=this.version)!=null?i:t.manifest.version,t.manifest.tag=(s=this.tag)!=null?s:t.manifest.tag,P.xfs.writeJsonSync(this.context.cwd.concat("/package.json"),t),this.version&&await this.$(`yarn workspaces foreach --no-private version --deferred ${t.manifest.version}`),!this.version&&!this.tag&&console.log(`${t.manifest.version}`)}};h.paths=[["kjo","version"]];var B=r(o("clipanion")),g=class extends e{constructor(){super(...arguments);this.dfx=B.Option.Boolean("-d,--dfx",!1)}async execute(){await this.$("yarn kjo clean"),await this.$("yarn install --immutable"),await this.$("yarn kjo build"),await this.$("yarn kjo test --unit --integration"),await this.$("yarn"),await this.$("yarn kjo lint")}};g.paths=[["kjo","make"]];var b=r(o("clipanion")),y=class extends e{constructor(){super(...arguments);this.site=b.Option.Boolean("-s,--site",!1);this.readme=b.Option.Boolean("-r,--readme",!1)}async execute(){let t=!this.site&&!this.readme;(this.site||t)&&await this.$("yarn workspace @roots/bud-docs run docusaurus build"),(this.readme||t)&&await this.$("yarn ts-node ./dev/readme")}};y.paths=[["kjo","md"]];var K={hooks:{afterAllInstalled:()=>{console.log("What a great install, am I right?")}},commands:[p,u,d,g,y,f,h]},R=K;return T;})();
return plugin;
}
};
