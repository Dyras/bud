import { Framework } from '@roots/bud-typings';
export default abstract class {
    name: string;
    build: Framework.Build;
    cache: Framework.Cache;
    cli: Framework.CLI;
    compiler: Framework.Compiler;
    disk: Framework.Disk;
    env: Framework.Env;
    extensions: Framework.Extensions;
    hooks: Framework.Hooks;
    logger: Framework.Logger;
    mode: Framework.Mode;
    server: Framework.Server;
    store: Framework.Store;
    use: Framework.Use;
    when: Framework.When;
    addPlugin: Framework.Api.AddPlugin<this>;
    alias: Framework.Api.Alias<this>;
    copy: Framework.Api.Copy<this>;
    define: Framework.Api.Define<this>;
    dev: Framework.Api.Dev<this>;
    devtool: Framework.Api.Devtool<this>;
    dist: Framework.Api.Dist<this>;
    distPath: Framework.Api.DistPath<this>;
    entry: Framework.Api.Entry<this>;
    externals: Framework.Api.Externals<this>;
    glob: Framework.Api.Glob<this>;
    gzip: Framework.Api.Gzip<this>;
    hash: Framework.Api.Hash<this>;
    minify: Framework.Api.Minify<this>;
    project: Framework.Api.Project<this>;
    projectPath: Framework.Api.ProjectPath<this>;
    provide: Framework.Api.Provide<this>;
    proxy: Framework.Api.Proxy<this>;
    publicPath: Framework.Api.PublicPath<this>;
    run: Framework.Api.Run<this>;
    runtime: Framework.Api.Runtime<this>;
    src: Framework.Api.Src<this>;
    srcPath: Framework.Api.SrcPath<this>;
    string: Framework.Api.Stringify<this>;
    target: Framework.Api.Target<this>;
    template: Framework.Api.Template<this>;
    vendor: Framework.Api.Vendor<this>;
    abstract get(): this;
    abstract access<I = unknown>(value: Framework.MaybeCallable<I>): I;
    abstract makeContainer<T>(repository?: Framework.Container<T>['repository']): Framework.Container<T>;
    abstract pipe(fns: CallableFunction[]): this;
}
//# sourceMappingURL=Base.d.ts.map